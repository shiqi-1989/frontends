import { Word } from "../shell/Word.js";
import { type Warnings } from "../Warnings.js";
import type { DataType } from "../Query.js";
export type FormType = "string" | "form";
export interface LongShort {
    type: "string" | "bool";
    name: string;
    removed?: string;
    expand?: boolean;
}
export interface LongOpts {
    [key: string]: LongShort | null;
}
export interface ShortOpts {
    [key: string]: string;
}
export declare const curlLongOpts: LongOpts;
export declare const COMMON_SUPPORTED_ARGS: string[];
export declare const ignoredArgs: Set<string>;
export declare function toBoolean(opt: string): boolean;
export declare const curlShortOpts: ShortOpts;
export declare const changedShortOpts: ShortOpts;
export type SrcFormParam = {
    value: Word;
    type: FormType;
};
export type SrcDataParam = [DataType, Word];
export interface OperationConfig {
    request?: Word;
    authtype: number;
    authArgs?: [string, boolean][];
    json?: boolean;
    url?: Word[];
    "upload-file"?: Word[];
    output?: Word[];
    header?: Word[];
    "proxy-header"?: Word[];
    form?: SrcFormParam[];
    data?: SrcDataParam[];
    "url-query"?: SrcDataParam[];
    "mail-rcpt"?: Word[];
    resolve?: Word[];
    "connect-to"?: Word[];
    cookie?: Word[];
    quote?: Word[];
    "telnet-option"?: Word[];
    http2?: boolean;
    http3?: boolean;
    "http3-only"?: boolean;
    insecure?: boolean;
    compressed?: boolean;
    head?: boolean;
    get?: boolean;
    cacert?: Word;
    capath?: Word;
    cert?: Word;
    key?: Word;
    "proto-default"?: Word;
    globoff?: boolean;
    "max-redirs"?: Word;
    location?: boolean;
    "location-trusted"?: boolean;
    proxy?: Word;
    "proxy-user"?: Word;
    range?: Word;
    referer?: Word;
    "time-cond"?: Word;
    "user-agent"?: Word;
    user?: Word;
    "aws-sigv4"?: Word;
    delegation?: Word;
    "oauth2-bearer"?: Word;
    "max-time"?: Word;
    "connect-timeout"?: Word;
    "cookie-jar"?: Word;
    [key: string]: any;
}
export interface GlobalConfig {
    verbose?: boolean;
    help?: boolean;
    version?: boolean;
    configs: OperationConfig[];
    warnings: Warnings;
    language?: string;
    stdin?: boolean;
}
export declare function pushProp<Type>(obj: {
    [key: string]: Type[];
}, prop: string, value: Type): {
    [key: string]: Type[];
};
export declare function parseArgs(args: Word[], longOpts?: LongOpts, shortOpts?: ShortOpts, supportedOpts?: Set<string>, warnings?: Warnings): GlobalConfig;
