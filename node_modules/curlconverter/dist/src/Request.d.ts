import { Word } from "./shell/Word.js";
import type { Warnings, Support } from "./Warnings.js";
import type { GlobalConfig } from "./curl/opts.js";
import { Headers } from "./Headers.js";
import type { Cookies } from "./Headers.js";
import { type AuthType } from "./curl/auth.js";
export { AuthType } from "./curl/auth.js";
import { type Curl_URL } from "./curl/url.js";
import type { DataParam, QueryList, QueryDict } from "./Query.js";
import type { FormParam } from "./curl/form.js";
export interface RequestUrl {
    originalUrl: Word;
    url: Word;
    queryReadsFile?: string;
    urlObj: Curl_URL;
    urlWithoutQueryList: Word;
    queryList?: QueryList;
    queryDict?: QueryDict;
    urlWithoutQueryArray: Word;
    urlWithOriginalQuery: Word;
    queryArray?: DataParam[];
    urlQueryArray?: DataParam[];
    uploadFile?: Word;
    output?: Word;
    method: Word;
    auth?: [Word, Word];
}
export interface Request {
    urls: RequestUrl[];
    queryArray?: DataParam[];
    authType: AuthType;
    awsSigV4?: Word;
    delegation?: Word;
    headers: Headers;
    cookies?: Cookies;
    cookieFiles?: Word[];
    cookieJar?: Word;
    compressed?: boolean;
    insecure?: boolean;
    multipartUploads?: FormParam[];
    dataArray?: DataParam[];
    data?: Word;
    dataReadsFile?: string;
    isDataBinary?: boolean;
    isDataRaw?: boolean;
    cert?: Word | [Word, Word];
    cacert?: Word;
    capath?: Word;
    proxy?: Word;
    proxyAuth?: Word;
    timeout?: Word;
    connectTimeout?: Word;
    followRedirects?: boolean;
    followRedirectsTrusted?: boolean;
    maxRedirects?: Word;
    http2?: boolean;
    http3?: boolean;
    stdin?: Word;
    stdinFile?: Word;
}
export declare function buildRequests(global: GlobalConfig, stdin?: Word, stdinFile?: Word): Request[];
export declare function getFirst(requests: Request[], warnings: Warnings, support?: Support): Request;
