{"version":3,"file":"parse.js","names":["parseLosslessNumber","revive","parse","text","reviver","parseNumber","i","value","parseValue","expectValue","expectEndOfInput","parseObject","charCodeAt","codeOpeningBrace","skipWhitespace","object","initial","length","codeClosingBrace","eatComma","key","parseString","undefined","throwObjectKeyExpected","Object","prototype","hasOwnProperty","call","throwDuplicateKey","eatColon","throwObjectKeyOrEndExpected","parseArray","codeOpeningBracket","array","codeClosingBracket","expectArrayItem","push","throwArrayItemOrEndExpected","parseNumeric","parseKeyword","name","slice","isWhitespace","codeDoubleQuote","result","codeBackslash","char","escapeChar","escapeCharacters","isHex","String","fromCharCode","parseInt","throwInvalidUnicodeCharacter","throwInvalidEscapeCharacter","isValidStringCharacter","throwInvalidCharacter","expectEndOfString","start","codeMinus","expectDigit","codeZero","isNonZeroDigit","isDigit","codeDot","codeLowercaseE","codeUppercaseE","codePlus","codeComma","SyntaxError","gotAt","codeColon","numSoFar","pos","chars","end","test","got","code","codeSpace","codeNewline","codeTab","codeReturn","codeNine","codeUppercaseA","codeUppercaseF","codeLowercaseA","codeLowercaseF","codeOne","b","f","n","r","t"],"sources":["../../src/parse.ts"],"sourcesContent":["import { parseLosslessNumber } from './numberParsers.js'\nimport { revive } from './revive.js'\nimport { GenericObject, JavaScriptValue } from './types'\nimport type { NumberParser, Reviver } from './types'\n\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(\n  text: string,\n  reviver?: Reviver,\n  parseNumber: NumberParser = parseLosslessNumber\n): JavaScriptValue {\n  let i = 0\n  const value = parseValue()\n  expectValue(value)\n  expectEndOfInput()\n\n  return reviver ? revive(value, reviver) : value\n\n  function parseObject(): GenericObject<unknown> | undefined {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++\n      skipWhitespace()\n\n      const object: GenericObject<unknown> = {}\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma()\n          skipWhitespace()\n        } else {\n          initial = false\n        }\n\n        const key = parseString()\n        if (key === undefined) {\n          throwObjectKeyExpected()\n        }\n        if (Object.prototype.hasOwnProperty.call(object, key)) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key)\n        }\n        skipWhitespace()\n        eatColon()\n        object[key] = parseValue()\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected()\n      }\n      i++\n\n      return object\n    }\n  }\n\n  function parseArray(): Array<unknown> | unknown {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++\n      skipWhitespace()\n\n      const array = []\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma()\n        } else {\n          initial = false\n        }\n\n        const value = parseValue()\n        expectArrayItem(value)\n        array.push(value)\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected()\n      }\n      i++\n\n      return array\n    }\n  }\n\n  function parseValue(): unknown {\n    skipWhitespace()\n\n    const value =\n      parseString() ??\n      parseNumeric() ??\n      parseObject() ??\n      parseArray() ??\n      parseKeyword('true', true) ??\n      parseKeyword('false', false) ??\n      parseKeyword('null', null)\n\n    skipWhitespace()\n\n    return value\n  }\n\n  function parseKeyword(name: string, value: unknown): unknown | undefined {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length\n      return value\n    }\n  }\n\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++\n    }\n  }\n\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++\n      let result = ''\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text[i + 1]\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            result += escapeChar\n            i++\n          } else if (char === 'u') {\n            if (\n              isHex(text.charCodeAt(i + 2)) &&\n              isHex(text.charCodeAt(i + 3)) &&\n              isHex(text.charCodeAt(i + 4)) &&\n              isHex(text.charCodeAt(i + 5))\n            ) {\n              result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16))\n              i += 5\n            } else {\n              throwInvalidUnicodeCharacter(i)\n            }\n          } else {\n            throwInvalidEscapeCharacter(i)\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i]\n          } else {\n            throwInvalidCharacter(text[i])\n          }\n        }\n        i++\n      }\n      expectEndOfString()\n      i++\n      return result\n    }\n  }\n\n  function parseNumeric() {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      expectDigit(start)\n    }\n\n    if (text.charCodeAt(i) === codeZero) {\n      i++\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      return parseNumber(text.slice(start, i))\n    }\n  }\n\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(`Comma ',' expected after value ${gotAt()}`)\n    }\n    i++\n  }\n\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(`Colon ':' expected after property name ${gotAt()}`)\n    }\n    i++\n  }\n\n  function expectValue(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`JSON value expected ${gotAt()}`)\n    }\n  }\n\n  function expectArrayItem(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`Array item expected ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(`Expected end of input ${gotAt()}`)\n    }\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i)\n      throw new SyntaxError(`Invalid number '${numSoFar}', expecting a digit ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(`End of string '\"' expected ${gotAt()}`)\n    }\n  }\n\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(`Quoted object key expected ${gotAt()}`)\n  }\n\n  function throwDuplicateKey(key: string) {\n    throw new SyntaxError(`Duplicate key '${key}' encountered at position ${i - key.length - 1}`)\n  }\n\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(`Quoted object key or end of object '}' expected ${gotAt()}`)\n  }\n\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(`Array item or end of array ']' expected ${gotAt()}`)\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new SyntaxError(`Invalid character '${char}' ${pos()}`)\n  }\n\n  function throwInvalidEscapeCharacter(start: number) {\n    const chars = text.slice(start, start + 2)\n    throw new SyntaxError(`Invalid escape character '${chars}' ${pos()}`)\n  }\n\n  function throwInvalidUnicodeCharacter(start: number) {\n    let end = start + 2\n    while (/\\w/.test(text[end])) {\n      end++\n    }\n    const chars = text.slice(start, end)\n    throw new SyntaxError(`Invalid unicode character '${chars}' ${pos()}`)\n  }\n\n  // zero based character position\n  function pos(): string {\n    return `at position ${i}`\n  }\n\n  function got(): string {\n    return i < text.length ? `but got '${text[i]}'` : 'but reached end of input'\n  }\n\n  function gotAt(): string {\n    return got() + ' ' + pos()\n  }\n}\n\nfunction isWhitespace(code: number): boolean {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn\n}\n\nfunction isHex(code: number): boolean {\n  return (\n    (code >= codeZero && code <= codeNine) ||\n    (code >= codeUppercaseA && code <= codeUppercaseF) ||\n    (code >= codeLowercaseA && code <= codeLowercaseF)\n  )\n}\n\nfunction isDigit(code: number): boolean {\n  return code >= codeZero && code <= codeNine\n}\n\nfunction isNonZeroDigit(code: number): boolean {\n  return code >= codeOne && code <= codeNine\n}\n\nexport function isValidStringCharacter(code: number): boolean {\n  return code >= 0x20 && code <= 0x10ffff\n}\n\n// map with all escape characters\nconst escapeCharacters: GenericObject<string> = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nconst codeBackslash = 0x5c // \"\\\"\nconst codeOpeningBrace = 0x7b // \"{\"\nconst codeClosingBrace = 0x7d // \"}\"\nconst codeOpeningBracket = 0x5b // \"[\"\nconst codeClosingBracket = 0x5d // \"]\"\nconst codeSpace = 0x20 // \" \"\nconst codeNewline = 0xa // \"\\n\"\nconst codeTab = 0x9 // \"\\t\"\nconst codeReturn = 0xd // \"\\r\"\nconst codeDoubleQuote = 0x0022 // \"\nconst codePlus = 0x2b // \"+\"\nconst codeMinus = 0x2d // \"-\"\nconst codeZero = 0x30\nconst codeOne = 0x31\nconst codeNine = 0x39\nconst codeComma = 0x2c // \",\"\nconst codeDot = 0x2e // \".\" (dot, period)\nconst codeColon = 0x3a // \":\"\nexport const codeUppercaseA = 0x41 // \"A\"\nexport const codeLowercaseA = 0x61 // \"a\"\nexport const codeUppercaseE = 0x45 // \"E\"\nexport const codeLowercaseE = 0x65 // \"e\"\nexport const codeUppercaseF = 0x46 // \"F\"\nexport const codeLowercaseF = 0x66 // \"f\"\n"],"mappings":"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"}